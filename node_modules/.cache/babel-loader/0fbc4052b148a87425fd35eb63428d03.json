{"ast":null,"code":"/**\n * combinatorics.js\n *\n *  Licensed under the MIT license.\n *  http://www.opensource.org/licenses/mit-license.php\n *\n *  @author: Dan Kogai <dankogai+github@gmail.com>\n *\n *  References:\n *  @link: http://www.ruby-doc.org/core-2.0/Array.html#method-i-combination\n *  @link: http://www.ruby-doc.org/core-2.0/Array.html#method-i-permutation\n *  @link: http://en.wikipedia.org/wiki/Factorial_number_system\n */\nexport const version = '1.5.4';\nconst _BI = typeof BigInt == 'function' ? BigInt : Number;\n/**\n * crops BigInt\n */\nconst _crop = n => n <= Number.MAX_SAFE_INTEGER ? Number(n) : _BI(n);\n/**\n * calculates `P(n, k)`.\n *\n * @link https://en.wikipedia.org/wiki/Permutation\n */\nexport function permutation(n, k) {\n  if (n < 0) throw new RangeError(\"negative n is not acceptable\");\n  if (k < 0) throw new RangeError(\"negative k is not acceptable\");\n  if (0 == k) return 1;\n  if (n < k) return 0;\n  [n, k] = [_BI(n), _BI(k)];\n  let p = _BI(1);\n  while (k--) p *= n--;\n  return _crop(p);\n}\n/**\n * calculates `C(n, k)`.\n *\n * @link https://en.wikipedia.org/wiki/Combination\n */\nexport function combination(n, k) {\n  if (0 == k) return 1;\n  if (n == k) return 1;\n  if (n < k) return 0;\n  const P = permutation;\n  const c = _BI(P(n, k)) / _BI(P(k, k));\n  return _crop(c);\n}\n/**\n * calculates `n!` === `P(n, n)`.\n *\n * @link https://en.wikipedia.org/wiki/Factorial\n */\nexport function factorial(n) {\n  return permutation(n, n);\n}\n/**\n * returns the factoradic representation of `n`, least significant order.\n *\n * @link https://en.wikipedia.org/wiki/Factorial_number_system\n * @param {number} l the number of digits\n */\nexport function factoradic(n) {\n  let l = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  if (n < 0) return undefined;\n  let [bn, bf] = [_BI(n), _BI(1)];\n  if (!l) {\n    for (l = 1; bf < bn; bf *= _BI(++l));\n    if (bn < bf) bf /= _BI(l--);\n  } else {\n    bf = _BI(factorial(l));\n  }\n  let digits = [0];\n  for (; l; bf /= _BI(l--)) {\n    digits[l] = Math.floor(Number(bn / bf));\n    bn %= bf;\n  }\n  return digits;\n}\n/**\n * `combinadic(n, k)` returns a function\n * that takes `m` as an argument and\n * returns the combinadics representation of `m` for `n C k`.\n *\n * @link https://en.wikipedia.org/wiki/Combinatorial_number_system\n */\nexport function combinadic(n, k) {\n  const count = combination(n, k);\n  return m => {\n    if (m < 0 || count <= m) return undefined;\n    let digits = [];\n    let [a, b] = [n, k];\n    let x = _BI(count) - _BI(1) - _BI(m);\n    for (let i = 0; i < k; i++) {\n      a--;\n      while (x < combination(a, b)) a--;\n      digits.push(n - 1 - a);\n      x -= _BI(combination(a, b));\n      b--;\n    }\n    return digits;\n  };\n}\n/**\n *\n */\nconst _crypto = typeof crypto !== 'undefined' ? crypto : {};\nconst _randomBytes = typeof _crypto['randomBytes'] === 'function' ? len => Uint8Array.from(_crypto['randomBytes'](len)) : typeof _crypto['getRandomValues'] === 'function' ? len => _crypto['getRandomValues'](new Uint8Array(len)) : len => Uint8Array.from(Array(len), () => Math.random() * 256);\n/**\n * returns random integer `n` where `min` <= `n` < `max`:\n *\n * if the argument is `BigInt` the result is also `BigInt`.\n *\n * @param {anyint} min\n * @param {anyint} max\n */\nexport function randomInteger() {\n  let min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  let max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Math.pow(2, 53);\n  let ctor = min.constructor;\n  if (arguments.length === 0) {\n    return Math.floor(Math.random() * ctor(max));\n  }\n  if (arguments.length == 1) {\n    [min, max] = [ctor(0), min];\n  }\n  if (typeof min == 'number') {\n    // number\n    [min, max] = [Math.ceil(Number(min)), Math.ceil(Number(max))];\n    return Math.floor(Math.random() * (max - min)) + min;\n  }\n  const mag = ctor(max) - ctor(min);\n  const len = mag.toString(16).length;\n  const u8s = _randomBytes(len);\n  const rnd = u8s.reduce((a, v) => (a << ctor(8)) + ctor(v), ctor(0));\n  return (ctor(rnd) * mag >> ctor(len * 8)) + ctor(min);\n}\n;\n/**\n * Base Class of `js-combinatorics`\n */\nclass _CBase {\n  /**\n   * does `new`\n   * @param args\n   */\n  static of() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return new (Function.prototype.bind.apply(this, [null].concat(args)))();\n  }\n  /**\n   * Same as `of` but takes a single array `arg`\n   *\n   * cf. https://stackoverflow.com/questions/1606797/use-of-apply-with-new-operator-is-this-possible\n   */\n  static from(arg) {\n    return new (Function.prototype.bind.apply(this, [null].concat(arg)))();\n  }\n  /**\n   * Common iterator\n   */\n  [Symbol.iterator]() {\n    return function* (it, len) {\n      for (let i = 0; i < len; i++) yield it.nth(i);\n    }(this, this.length);\n  }\n  /**\n   * returns `[...this]`.\n   */\n  toArray() {\n    return [...this];\n  }\n  /**\n   * tells wether you need `BigInt` to access all elements.\n   */\n  get isBig() {\n    return Number.MAX_SAFE_INTEGER < this.length;\n  }\n  /**\n   * tells wether it is safe to work on this instance.\n   *\n   * * always `true` unless your platform does not support `BigInt`.\n   * * if not, `true` iff `.isBig` is `false`.\n   */\n  get isSafe() {\n    return typeof BigInt !== 'undefined' || !this.isBig;\n  }\n  /**\n  * check n for nth\n  */\n  _check(n) {\n    if (n < 0) {\n      if (this.length < -n) return undefined;\n      return _crop(_BI(this.length) + _BI(n));\n    }\n    if (this.length <= n) return undefined;\n    return n;\n  }\n  /**\n   * get the `n`th element of the iterator.\n   * negative `n` goes backwards\n   */\n  nth(n) {\n    return [];\n  }\n  /**\n   * pick random element\n   */\n  sample() {\n    return this.nth(randomInteger(this.length));\n  }\n  /**\n   * an infinite steam of random elements\n   */\n  samples() {\n    return function* (it) {\n      while (true) yield it.sample();\n    }(this);\n  }\n}\n/**\n * Permutation\n */\nexport class Permutation extends _CBase {\n  constructor(seed) {\n    let size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    super();\n    this.seed = [...seed];\n    this.size = 0 < size ? size : this.seed.length;\n    this.length = permutation(this.seed.length, this.size);\n    Object.freeze(this);\n  }\n  nth(n) {\n    n = this._check(n);\n    if (n === undefined) return undefined;\n    const offset = this.seed.length - this.size;\n    const skip = factorial(offset);\n    let digits = factoradic(_BI(n) * _BI(skip), this.seed.length);\n    let source = this.seed.slice();\n    let result = [];\n    for (let i = this.seed.length - 1; offset <= i; i--) {\n      result.push(source.splice(digits[i], 1)[0]);\n    }\n    return result;\n  }\n}\n/**\n * Combination\n */\nexport class Combination extends _CBase {\n  constructor(seed) {\n    let size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    super();\n    this.seed = [...seed];\n    this.size = 0 < size ? size : this.seed.length;\n    this.size = size;\n    this.length = combination(this.seed.length, this.size);\n    this.comb = combinadic(this.seed.length, this.size);\n    Object.freeze(this);\n  }\n  /**\n   * returns an iterator which is more efficient\n   * than the default iterator that uses .nth\n   *\n   * @link https://en.wikipedia.org/wiki/Combinatorial_number_system#Applications\n   */\n  bitwiseIterator() {\n    // console.log('overriding _CBase');\n    const ctor = this.length.constructor;\n    const [zero, one, two] = [ctor(0), ctor(1), ctor(2)];\n    const inc = x => {\n      const u = x & -x;\n      const v = u + x;\n      return v + ((v ^ x) / u >> two);\n    };\n    let x = (one << ctor(this.size)) - one; // 0b11...1\n    return function* (it, len) {\n      for (let i = 0; i < len; i++, x = inc(x)) {\n        let result = [];\n        for (let y = x, j = 0; zero < y; y >>= one, j++) {\n          if (y & one) result.push(it.seed[j]);\n        }\n        // console.log(`x = ${x}`);\n        yield result;\n      }\n    }(this, this.length);\n  }\n  nth(n) {\n    n = this._check(n);\n    if (n === undefined) return undefined;\n    let result = [];\n    for (let i of this.comb(n)) {\n      result.push(this.seed[i]);\n    }\n    return result;\n  }\n}\n/**\n * Base N\n */\nexport class BaseN extends _CBase {\n  constructor(seed) {\n    let size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    super();\n    this.seed = [...seed];\n    this.size = size;\n    let base = this.seed.length;\n    this.base = base;\n    let length = size < 1 ? 0 : Array(size).fill(_BI(base)).reduce((a, v) => a * v);\n    this.length = _crop(length);\n    Object.freeze(this);\n  }\n  nth(n) {\n    n = this._check(n);\n    if (n === undefined) return undefined;\n    let bn = _BI(n);\n    const bb = _BI(this.base);\n    let result = [];\n    for (let i = 0; i < this.size; i++) {\n      let bd = bn % bb;\n      result.push(this.seed[Number(bd)]);\n      bn -= bd;\n      bn /= bb;\n    }\n    return result;\n  }\n}\n/**\n * Power Set\n */\nexport class PowerSet extends _CBase {\n  constructor(seed) {\n    super();\n    this.seed = [...seed];\n    const length = _BI(1) << _BI(this.seed.length);\n    this.length = _crop(length);\n    Object.freeze(this);\n  }\n  nth(n) {\n    n = this._check(n);\n    if (n === undefined) return undefined;\n    let bn = _BI(n);\n    let result = [];\n    for (let bi = _BI(0); bn; bn >>= _BI(1), bi++) if (bn & _BI(1)) result.push(this.seed[Number(bi)]);\n    return result;\n  }\n}\n/**\n * Cartesian Product\n */\nexport class CartesianProduct extends _CBase {\n  constructor() {\n    super();\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    this.seed = args.map(v => [...v]);\n    this.size = this.seed.length;\n    const length = this.seed.reduce((a, v) => a * _BI(v.length), _BI(1));\n    this.length = _crop(length);\n    Object.freeze(this);\n  }\n  nth(n) {\n    n = this._check(n);\n    if (n === undefined) return undefined;\n    let bn = _BI(n);\n    let result = [];\n    for (let i = 0; i < this.size; i++) {\n      const base = this.seed[i].length;\n      const bb = _BI(base);\n      const bd = bn % bb;\n      result.push(this.seed[i][Number(bd)]);\n      bn -= bd;\n      bn /= bb;\n    }\n    return result;\n  }\n}","map":{"version":3,"names":["version","_BI","BigInt","Number","_crop","n","MAX_SAFE_INTEGER","permutation","k","RangeError","p","combination","P","c","factorial","factoradic","l","arguments","length","undefined","bn","bf","digits","Math","floor","combinadic","count","m","a","b","x","i","push","_crypto","crypto","_randomBytes","len","Uint8Array","from","Array","random","randomInteger","min","max","pow","ctor","constructor","ceil","mag","toString","u8s","rnd","reduce","v","_CBase","of","_len","args","_key","Function","prototype","bind","apply","concat","arg","Symbol","iterator","it","nth","toArray","isBig","isSafe","_check","sample","samples","Permutation","seed","size","Object","freeze","offset","skip","source","slice","result","splice","Combination","comb","bitwiseIterator","zero","one","two","inc","u","y","j","BaseN","base","fill","bb","bd","PowerSet","bi","CartesianProduct","_len2","_key2","map"],"sources":["/Users/thomaskonan/Desktop/Actualize/ReactTicTacToe/node_modules/js-combinatorics/combinatorics.js"],"sourcesContent":["/**\n * combinatorics.js\n *\n *  Licensed under the MIT license.\n *  http://www.opensource.org/licenses/mit-license.php\n *\n *  @author: Dan Kogai <dankogai+github@gmail.com>\n *\n *  References:\n *  @link: http://www.ruby-doc.org/core-2.0/Array.html#method-i-combination\n *  @link: http://www.ruby-doc.org/core-2.0/Array.html#method-i-permutation\n *  @link: http://en.wikipedia.org/wiki/Factorial_number_system\n */\nexport const version = '1.5.4';\nconst _BI = typeof BigInt == 'function' ? BigInt : Number;\n/**\n * crops BigInt\n */\nconst _crop = (n) => n <= Number.MAX_SAFE_INTEGER ? Number(n) : _BI(n);\n/**\n * calculates `P(n, k)`.\n *\n * @link https://en.wikipedia.org/wiki/Permutation\n */\nexport function permutation(n, k) {\n    if (n < 0)\n        throw new RangeError(`negative n is not acceptable`);\n    if (k < 0)\n        throw new RangeError(`negative k is not acceptable`);\n    if (0 == k)\n        return 1;\n    if (n < k)\n        return 0;\n    [n, k] = [_BI(n), _BI(k)];\n    let p = _BI(1);\n    while (k--)\n        p *= n--;\n    return _crop(p);\n}\n/**\n * calculates `C(n, k)`.\n *\n * @link https://en.wikipedia.org/wiki/Combination\n */\nexport function combination(n, k) {\n    if (0 == k)\n        return 1;\n    if (n == k)\n        return 1;\n    if (n < k)\n        return 0;\n    const P = permutation;\n    const c = _BI(P(n, k)) / _BI(P(k, k));\n    return _crop(c);\n}\n/**\n * calculates `n!` === `P(n, n)`.\n *\n * @link https://en.wikipedia.org/wiki/Factorial\n */\nexport function factorial(n) {\n    return permutation(n, n);\n}\n/**\n * returns the factoradic representation of `n`, least significant order.\n *\n * @link https://en.wikipedia.org/wiki/Factorial_number_system\n * @param {number} l the number of digits\n */\nexport function factoradic(n, l = 0) {\n    if (n < 0)\n        return undefined;\n    let [bn, bf] = [_BI(n), _BI(1)];\n    if (!l) {\n        for (l = 1; bf < bn; bf *= _BI(++l))\n            ;\n        if (bn < bf)\n            bf /= _BI(l--);\n    }\n    else {\n        bf = _BI(factorial(l));\n    }\n    let digits = [0];\n    for (; l; bf /= _BI(l--)) {\n        digits[l] = Math.floor(Number(bn / bf));\n        bn %= bf;\n    }\n    return digits;\n}\n/**\n * `combinadic(n, k)` returns a function\n * that takes `m` as an argument and\n * returns the combinadics representation of `m` for `n C k`.\n *\n * @link https://en.wikipedia.org/wiki/Combinatorial_number_system\n */\nexport function combinadic(n, k) {\n    const count = combination(n, k);\n    return (m) => {\n        if (m < 0 || count <= m)\n            return undefined;\n        let digits = [];\n        let [a, b] = [n, k];\n        let x = _BI(count) - _BI(1) - _BI(m);\n        for (let i = 0; i < k; i++) {\n            a--;\n            while (x < combination(a, b))\n                a--;\n            digits.push(n - 1 - a);\n            x -= _BI(combination(a, b));\n            b--;\n        }\n        return digits;\n    };\n}\n/**\n *\n */\nconst _crypto = typeof crypto !== 'undefined' ? crypto : {};\nconst _randomBytes = typeof _crypto['randomBytes'] === 'function'\n    ? (len) => Uint8Array.from(_crypto['randomBytes'](len))\n    : typeof _crypto['getRandomValues'] === 'function'\n        ? (len) => _crypto['getRandomValues'](new Uint8Array(len))\n        : (len) => Uint8Array.from(Array(len), () => Math.random() * 256);\n/**\n * returns random integer `n` where `min` <= `n` < `max`:\n *\n * if the argument is `BigInt` the result is also `BigInt`.\n *\n * @param {anyint} min\n * @param {anyint} max\n */\nexport function randomInteger(min = 0, max = Math.pow(2, 53)) {\n    let ctor = min.constructor;\n    if (arguments.length === 0) {\n        return Math.floor(Math.random() * ctor(max));\n    }\n    if (arguments.length == 1) {\n        [min, max] = [ctor(0), min];\n    }\n    if (typeof min == 'number') { // number\n        [min, max] = [Math.ceil(Number(min)), Math.ceil(Number(max))];\n        return Math.floor(Math.random() * (max - min)) + min;\n    }\n    const mag = ctor(max) - ctor(min);\n    const len = mag.toString(16).length;\n    const u8s = _randomBytes(len);\n    const rnd = u8s.reduce((a, v) => ((a << ctor(8)) + ctor(v)), ctor(0));\n    return ((ctor(rnd) * mag) >> ctor(len * 8)) + ctor(min);\n}\n;\n/**\n * Base Class of `js-combinatorics`\n */\nclass _CBase {\n    /**\n     * does `new`\n     * @param args\n     */\n    static of(...args) {\n        return new (Function.prototype.bind.apply(this, [null].concat(args)));\n    }\n    /**\n     * Same as `of` but takes a single array `arg`\n     *\n     * cf. https://stackoverflow.com/questions/1606797/use-of-apply-with-new-operator-is-this-possible\n     */\n    static from(arg) {\n        return new (Function.prototype.bind.apply(this, [null].concat(arg)));\n    }\n    /**\n     * Common iterator\n     */\n    [Symbol.iterator]() {\n        return function* (it, len) {\n            for (let i = 0; i < len; i++)\n                yield it.nth(i);\n        }(this, this.length);\n    }\n    /**\n     * returns `[...this]`.\n     */\n    toArray() {\n        return [...this];\n    }\n    /**\n     * tells wether you need `BigInt` to access all elements.\n     */\n    get isBig() {\n        return Number.MAX_SAFE_INTEGER < this.length;\n    }\n    /**\n     * tells wether it is safe to work on this instance.\n     *\n     * * always `true` unless your platform does not support `BigInt`.\n     * * if not, `true` iff `.isBig` is `false`.\n     */\n    get isSafe() {\n        return typeof BigInt !== 'undefined' || !this.isBig;\n    }\n    /**\n    * check n for nth\n    */\n    _check(n) {\n        if (n < 0) {\n            if (this.length < -n)\n                return undefined;\n            return _crop(_BI(this.length) + _BI(n));\n        }\n        if (this.length <= n)\n            return undefined;\n        return n;\n    }\n    /**\n     * get the `n`th element of the iterator.\n     * negative `n` goes backwards\n     */\n    nth(n) { return []; }\n    ;\n    /**\n     * pick random element\n     */\n    sample() {\n        return this.nth(randomInteger(this.length));\n    }\n    /**\n     * an infinite steam of random elements\n     */\n    samples() {\n        return function* (it) {\n            while (true)\n                yield it.sample();\n        }(this);\n    }\n}\n/**\n * Permutation\n */\nexport class Permutation extends _CBase {\n    constructor(seed, size = 0) {\n        super();\n        this.seed = [...seed];\n        this.size = 0 < size ? size : this.seed.length;\n        this.length = permutation(this.seed.length, this.size);\n        Object.freeze(this);\n    }\n    nth(n) {\n        n = this._check(n);\n        if (n === undefined)\n            return undefined;\n        const offset = this.seed.length - this.size;\n        const skip = factorial(offset);\n        let digits = factoradic(_BI(n) * _BI(skip), this.seed.length);\n        let source = this.seed.slice();\n        let result = [];\n        for (let i = this.seed.length - 1; offset <= i; i--) {\n            result.push(source.splice(digits[i], 1)[0]);\n        }\n        return result;\n    }\n}\n/**\n * Combination\n */\nexport class Combination extends _CBase {\n    constructor(seed, size = 0) {\n        super();\n        this.seed = [...seed];\n        this.size = 0 < size ? size : this.seed.length;\n        this.size = size;\n        this.length = combination(this.seed.length, this.size);\n        this.comb = combinadic(this.seed.length, this.size);\n        Object.freeze(this);\n    }\n    /**\n     * returns an iterator which is more efficient\n     * than the default iterator that uses .nth\n     *\n     * @link https://en.wikipedia.org/wiki/Combinatorial_number_system#Applications\n     */\n    bitwiseIterator() {\n        // console.log('overriding _CBase');\n        const ctor = this.length.constructor;\n        const [zero, one, two] = [ctor(0), ctor(1), ctor(2)];\n        const inc = (x) => {\n            const u = x & -x;\n            const v = u + x;\n            return v + (((v ^ x) / u) >> two);\n        };\n        let x = (one << ctor(this.size)) - one; // 0b11...1\n        return function* (it, len) {\n            for (let i = 0; i < len; i++, x = inc(x)) {\n                let result = [];\n                for (let y = x, j = 0; zero < y; y >>= one, j++) {\n                    if (y & one)\n                        result.push(it.seed[j]);\n                }\n                // console.log(`x = ${x}`);\n                yield result;\n            }\n        }(this, this.length);\n    }\n    nth(n) {\n        n = this._check(n);\n        if (n === undefined)\n            return undefined;\n        let result = [];\n        for (let i of this.comb(n)) {\n            result.push(this.seed[i]);\n        }\n        return result;\n    }\n}\n/**\n * Base N\n */\nexport class BaseN extends _CBase {\n    constructor(seed, size = 1) {\n        super();\n        this.seed = [...seed];\n        this.size = size;\n        let base = this.seed.length;\n        this.base = base;\n        let length = size < 1 ? 0\n            : Array(size).fill(_BI(base)).reduce((a, v) => a * v);\n        this.length = _crop(length);\n        Object.freeze(this);\n    }\n    nth(n) {\n        n = this._check(n);\n        if (n === undefined)\n            return undefined;\n        let bn = _BI(n);\n        const bb = _BI(this.base);\n        let result = [];\n        for (let i = 0; i < this.size; i++) {\n            let bd = bn % bb;\n            result.push(this.seed[Number(bd)]);\n            bn -= bd;\n            bn /= bb;\n        }\n        return result;\n    }\n}\n/**\n * Power Set\n */\nexport class PowerSet extends _CBase {\n    constructor(seed) {\n        super();\n        this.seed = [...seed];\n        const length = _BI(1) << _BI(this.seed.length);\n        this.length = _crop(length);\n        Object.freeze(this);\n    }\n    nth(n) {\n        n = this._check(n);\n        if (n === undefined)\n            return undefined;\n        let bn = _BI(n);\n        let result = [];\n        for (let bi = _BI(0); bn; bn >>= _BI(1), bi++)\n            if (bn & _BI(1))\n                result.push(this.seed[Number(bi)]);\n        return result;\n    }\n}\n/**\n * Cartesian Product\n */\nexport class CartesianProduct extends _CBase {\n    constructor(...args) {\n        super();\n        this.seed = args.map(v => [...v]);\n        this.size = this.seed.length;\n        const length = this.seed.reduce((a, v) => a * _BI(v.length), _BI(1));\n        this.length = _crop(length);\n        Object.freeze(this);\n    }\n    nth(n) {\n        n = this._check(n);\n        if (n === undefined)\n            return undefined;\n        let bn = _BI(n);\n        let result = [];\n        for (let i = 0; i < this.size; i++) {\n            const base = this.seed[i].length;\n            const bb = _BI(base);\n            const bd = bn % bb;\n            result.push(this.seed[i][Number(bd)]);\n            bn -= bd;\n            bn /= bb;\n        }\n        return result;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}